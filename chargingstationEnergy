# coding=utf-8
import pandas as pd
from math import *
from geopy.distance import geodesic
import numpy as np
from vincenty import vincenty
import time

def savetoFile(dataresults):
    # with open("C:/WorkFolder/PYTHON/ResultFolder", "w+"):
    pd.DataFrame(dataresults).to_csv("C:/WorkFolder/PYTHON/ResultFolder/Finalresult.csv", encoding= "utf8", )

#距离计算公式一 calDistance
# input Lat_A 纬度A
# input Lng_A 经度A
# input Lat_B 纬度B
# input Lng_B 经度B
# output distance 距离(km)
def calcDistance(Lat_A, Lng_A, Lat_B, Lng_B):
    ra = 6378.140  # 赤道半径 (km)
    rb = 6356.755  # 极半径 (km)
    flatten = (ra - rb) / ra  # 地球扁率
    rad_lat_A = radians(Lat_A)
    rad_lng_A = radians(Lng_A)
    rad_lat_B = radians(Lat_B)
    rad_lng_B = radians(Lng_B)
    pA = atan(rb / ra * tan(rad_lat_A))
    pB = atan(rb / ra * tan(rad_lat_B))
    xx = acos(sin(pA) * sin(pB) + cos(pA) * cos(pB) * cos(rad_lng_A - rad_lng_B))
    c1 = (sin(xx) - xx) * (sin(pA) + sin(pB)) ** 2 / cos(xx / 2) ** 2
    c2 = (sin(xx) + xx) * (sin(pA) - sin(pB)) ** 2 / sin(xx / 2) ** 2
    dr = flatten / 8 * (c1 - c2)
    distance = ra * (xx + dr)
    return distance

#读入充电记录表
chargerecord  = pd.read_csv("C:/WorkFolder/PYTHON/technology_energy_data _summaryAll.csv", encoding="utf8", iterator = True)
try:
    df = chargerecord.get_chunk(99999999)
    print(df.axes)
    # df.dropna()
    # df["Center Lng"]
    # df["Center Lat"]

except StopIteration:
    print("Interation is stopped")
# IndexTemp =['Number of Records', 'Admin1', 'Admin2', 'Center Lat', 'Center Lng',
#        'Country', 'Country Code', 'Derived Location', 'Energy Added', 'Hex',
#        'Num Sessions', 'Place', 'Start Date', 'Technology']
"""
df1 = df.groupby(["Center Lng", "Center Lat"]).sum()
df2 = pd.DataFrame(df1).reset_index()
print(df, "+++++++++++++++++++",df.axes, df.reindex, type(df))
"""
# df = pd.DataFrame.swaplevel(df)

# df = pd.DataFrame(dict(df.groupby(["Center Lng", "Center Lat"], as_index= True)))

LISTlongtitudelist = df["Center Lng"].tolist()
LISTlatitudelist = df["Center Lat"].tolist()
LISTenergyadded = df["Energy Added"].tolist()
LISTtechnology = df["Technology"].tolist()



# print(LISTlatitudelist, "\n", LISTlongtitudelist)

#读入国网站点列表
servicestoplocation  = pd.read_excel("C:/WorkFolder/PYTHON/servicestop.xlsx", header=0)
# print(servicestoplocation.head())
# servicestoplocation["latitude"].apply(pd.to_numeric)
# servicestoplocation["longitude"].apply(pd.to_numeric)
latitudelist = servicestoplocation["latitude"].values.tolist()
longtitudelist = servicestoplocation["longitude"].values.tolist()
stationname = servicestoplocation["name"].tolist()
#
# locationmat = np.mat([latitudelist,longtitudelist], dtype= float)
# print(locationmat)
# LOCATIONMAT = np.mat([LISTlatitudelist,LISTlongtitudelist])
# mat_result  = locationmat + LOCATIONMAT
# # mat_result = geodesic(locationmat,LOCATIONMAT)
# print(mat_result)
# for i in mat_result:
#     print(type(i))

#DF分组尝试减少计算量
# groupy = df.groupby(["Center Lng", "Center Lat"])
# print(pd.DataFrame(groupy))

record_number  = 1
result_list = []
### 11111111111111111111111111111111
time_start = time.time()
for (a, b, c) in zip(latitudelist, longtitudelist, stationname):
    time_start1 = time.time()
    for (target1, target2, energy, tech) in zip(LISTlatitudelist, LISTlongtitudelist, LISTenergyadded, LISTtechnology):
        if abs(a - target1)< 0.1 and abs(b-target2) < 0.1:
            # result = calcDistance(a, b, target1, target2)
            result = vincenty((a, b), (target1, target2))
        # print(result, a, b, target1, target2, "RESULT2")
            if result > 1:
                pass

            else:
                # print(result, a, b, target1, target2, energy, tech)
                result_list.append([c, result, a, b, target1, target2, energy, tech])
                resultDF = pd.DataFrame(result_list, columns=["SiteName", "DIST", "la", "ln", "LA", "LN", "ENERG", "TECH"])
        else:
            pass

    # print(pd.DataFrame(result_list))
    # print(record_number)
    record_number += 1
    print(record_number, "单用时", time.time() - time_start1, "总用时", time.time()-time_start)
savetoFile(resultDF)
### 2222222222222222222222222222222#

#
# for (target1, target2, energy, tech) in zip(LISTlatitudelist, LISTlongtitudelist, LISTenergyadded, LISTtechnology):
#     print(target1, target2, "--------------------------------------------------")
#     for (a, b) in zip(latitudelist, longtitudelist):
#         result = calcDistance(a, b, target1, target2)
#         # print(result, a, b, target1, target2, "RESULT2")
#         if result > 2:
#             pass
#
#         else:
#             # print(result, a, b, target1, target2, energy, tech)
#             result_list.append([result, a, b, target1, target2, energy, tech])
#             resultDF = pd.DataFrame(result_list, columns= ["DIST", "la","ln", "LA", "LN","ENERG","TECH"])
#     print(pd.DataFrame(result_list))


    # print(record_number)
    # record_number += 1
    # resultDF = pd.DataFrame(result_list, columns=["DIST", "la", "ln", "LA", "LN", "ENERG", "TECH"])
    # print(pd.DataFrame(result_list))
    # # if len(result_list)>5:


# savetoFile(resultDF)








